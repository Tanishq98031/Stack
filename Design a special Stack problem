import java.util.*;
public class SpecialStack {
	// Define the data members.
	Stack<Integer> st = new Stack<>();

	/*----------------- Public Functions of SpecialStack -----------------*/
    
    int mini = Integer.MAX_VALUE;
	void push(int data) {
		// Implement the push() function.
        if(st.empty())
        {
            st.push(data);
            mini = data;
        }
        else
        {
            if(data < mini)
            {
                int val = 2 * data - mini;
                st.push(val);
                mini = data;
            }
            else
            {
                st.push(data);
            }
        }
	}

	int pop() {
		// Implement the pop() function.
        if(st.empty())
        {
            return -1;
        }
        int curr = st.peek();
        st.pop();
        if(curr > mini)
        {
            return curr;
        }
        else
        {
            int prevMini = mini;
            int val = 2 * mini - curr;
            mini = val;
            return prevMini;
        }
	}

	int top() {
		// Implement the top() function.
        if(st.empty())
        {
            return -1;
        }
        int curr = st.peek();
        if(curr < mini)
        {
            return mini;
        }
        else
        {
            return curr;
        }
	}

	boolean isEmpty() {
		// Implement the isEmpty() function.
        return st.empty();
	}

	int getMin() {
		// Implement the getMin() function.
        if(st.empty())
        {
            return -1;
        }
        return mini;
	}
}
